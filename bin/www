#!/usr/bin/env node
'use strict'

const app = require('../app')
const debug = require('debug')('backend:server')
const http = require('http')
let server

const normalizePort = (val) => {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return 0
}

const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + 4000
    : 'Port ' + 4000

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

const onListening = () => {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port

  debug('Listening on ' + bind)
}

const start = async () => {
  const port = normalizePort(process.env.PORT || '3000')
  app.set('port', port)

  console.log('[Server]', 'HTTP server running in port', port)

  server = http.createServer(app)
  server.listen(port, 'localhost')
  server.on('error', onError)
  server.on('listening', onListening)
}

start()
